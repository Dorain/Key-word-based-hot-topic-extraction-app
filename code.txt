#include<iostream>
#include<fstream>
#include<string.h>
#include<cstring>
#include<stdio.h>
#include<stdlib.h>
using namespace std;

const char tag[3][10]={"user ","statu","user/"};  //处理数据时用到的标志
const double alpha=10;
const double beta=6;
const double T_alpha=20;
const double T_beta=200;
const double stand=0.03;
const double T_size=16;

class activity                 //活动集
{
	public:
		char user_id[10];
		char name[20];
		int time;
		int num;
		char cont[50][20];
		int contn[50];
		double score[50];
		bool valid[50];
		char example[300];
		activity(){
			user_id[0]='\0';
			name[0]='\0';
			time=0;
			num=0;
			memset(valid,true,sizeof(score));
			memset(score,0,sizeof(score));
			memset(cont,0,sizeof(cont));
			memset(example,0,sizeof(example));
			memset(contn,0,sizeof(contn));
		}
};

class phrase                    //词汇集
{
	public:
		char s[20];
		int hash;
		int length;
		int p_act[2000];
		int actnum;
		bool invalid;
		phrase(){
			invalid=false;
			actnum=0;
			memset(s,'\0',sizeof(s));
			hash=0;
		}	
};

class burst
{
	public:
		char ex_p[10][20];
		int ex_f[10];
		int ex_n;
		char phrase[500][20];
		int fre[500];
		int num;
		double score[500];
		bool valid[500];
		char example[300];
		burst()
		{
			num=0;
			ex_n=0;
			memset(ex_f,0,sizeof(ex_f));
			memset(ex_p,0,sizeof(ex_p));
			memset(fre,0,sizeof(fre));
			memset(phrase,0,sizeof(phrase));
			memset(score,0,sizeof(score));
			memset(valid,0,sizeof(valid));
			memset(example,0,sizeof(example));
		}
		void burst_clear()
		{
			num=0;
			ex_n=0;
			memset(ex_f,0,sizeof(ex_f));
			memset(ex_p,0,sizeof(ex_p));
			memset(fre,0,sizeof(fre));
			memset(phrase,0,sizeof(phrase));
			memset(score,0,sizeof(score));
			memset(valid,0,sizeof(valid));
			memset(example,0,sizeof(example));
		}
};

int burst_n=0;                 //事件个数
burst bur[10000];              //事件集
int n=0;	                   //当前活动集个数
activity act[10000];           //活动集
double act_score[10000];       //活动集的相关性评价
char connect[10000][20];       //活动的相关性关联词
bool have_deal[10000];         //合并活动集时用到的标志
phrase ph[100000];             //词汇集
bool h[100000];                //hash标记值
bool p_valid[100000];          //当前词是否是特征词

void read_data();
void hashdeal(char *w);
void transf(char *x,char *y);
void actdeal(char *user_id,char *name,char *w,int n);
void read_0(char *user_id,char *name,char *t);
void read_1(char *user_id,char *name,char *t);
void read_2(char *user_id,char *name,char *t);
void p_print(int m);
void act_print(int m);
void ext_act(char *w);
void score_p(char *w,int x);
bool score_act(int num,int *sa,char *w);
void score_bur(int k);
void act_con();
void act_merge();
void do_merge(int *r,int num);
void burst_do_merge(int *r,int num);
void burst_merge();


void read_data()                   //读数据处理函数
{
	fstream fin("file.txt",ios::in);
	char t[500],user_id[100],name[100];
	char check[10];
	int i;
	while(1)
	{	
		
		fin.getline(t,3000);
		for(i=0;i<=4;i++)
			check[i]=t[i+1];
		check[5]='\0';
		if(strcmp(check,tag[0])==0)read_0(user_id,name,t);
		if(strcmp(check,tag[1])==0)read_1(user_id,name,t);
		if(strcmp(check,tag[2])==0)read_2(user_id,name,t);
		if(t[0]=='P')break;
	}
}

void read_0(char *user_id,char *name,char *t)       //第一类数据处理
{
	int i=0,j=0,l=strlen(t);
	while(t[i]!=34)i++;
	i++;
	while(t[i]!=34)
	{
		*user_id=t[i];
		user_id++;
		i++;
	}
	*user_id='\0';
	i++;
	while(t[i]!=34)i++;
	i++;
	while(t[i]!=34)
	{
		*name=t[i];
		name++;
		i++;
	}
	*name='\0';
	return;
}	

void read_1(char *user_id,char *name,char *t)       //第二类数据处理  
{
	int i=0,j=0,l=strlen(t);
	int hash;
	char w[20];
	transf(act[n].user_id,user_id);
	transf(act[n].name,name);
	while(*t!=34)t++;
	t++;
	while(*t!=34)t++;
	t++;
	while(*t!=34)t++;
	t++;
	while(*t==' ')t++;
	while(*t!=34)
	{
		transf(w,&t[i]);
		ext_act(w);
		hashdeal(w);
		while(*t!=' ' && *t!=34)t++;
		if(*t==34)break;
		while(*t==' ')t++;
	}
	n++;
}

void read_2(char *user_id,char *name,char *t)        //第三类数据处理
{
	user_id='\0';
	name='\0';
}	

void ext_act(char *w)           //扩展活动集的内含词
{
	int i;
	for(i=0;i<act[n].num;i++)
	{
		if(strcmp(w,act[n].cont[i])==0)
		{
			act[n].contn[i]++;
			return;
		}
	}
	transf(act[n].cont[act[n].num],w);
	act[n].contn[act[n].num]++;
	act[n].num++;
}

void hashdeal(char *w)       //对中文词汇的hash处理以及词汇集和活动集处理
{	
	unsigned int p,q,t;
	p=*w;
	p=p&0x0ff;
	if(p<128)return;
	q=*(w+1);
	q=q&0x0ff;
	p=p*256+q;
	t=p;
	if(!h[p])
	{
		h[p]=true;
		transf(ph[p].s,w);
		ph[p].hash=t;
		ph[p].length=strlen(ph[p].s);
		ph[p].p_act[ph[p].actnum]=n;
		ph[p].actnum++;
	}else
	{	
		while(h[p])
		{
			if(strcmp(ph[p].s,w)==0)
			{
				//if(ph[p].actnum>=500)
				//{
					//ph[p].actnum++;
					//return;
				//}
				if(ph[p].p_act[ph[p].actnum-1]==n)return;
				ph[p].p_act[ph[p].actnum]=n;
				ph[p].actnum++;
				return;
			}
			p++;
		}
		h[p]=true;
		transf(ph[p].s,w);
		ph[p].hash=t;
		ph[p].length=strlen(ph[p].s);
		ph[p].length=strlen(ph[p].s);
		ph[p].p_act[ph[p].actnum]=n;
		ph[p].actnum++;
	}		
}
	
void transf(char *x,char *y)        //词汇提取函数
{
	while(*y!=' ' && *y!=34 && *y!='\0')
	{
		*x=*y;
		x++;
		y++;
	}
	*x='\0';
}
		
void actdeal(char *user_id,char *name,char *w,int n,int time)      //活动集处理函数
{
	int i=0,j=0;
	if(act[n].num!=0)
	{
		act[n].num++;
		transf(act[n].cont[act[n].num],w);
		return;
	}
	while(*user_id!='\0')
	{
		act[n].user_id[i]=*user_id;
		i++;
	}
	i=0;
	while(*name!='\0')
	{
		act[n].name[i]=*name;
		i++;
	}
	act[n].time=time;
	transf(act[n].cont[0],w);
}

fstream fout("f1.txt",ios::app);

void p_print(int m)         //对词汇集的输出
{
	int i;
	fout<<"phrase: "<<ph[m].s<<endl;
	fout<<"hash: "<<ph[m].hash<<endl;
	for(i=0;i<ph[m].actnum;i++)
		fout<<i<<' '<<ph[m].p_act[i]<<endl;
	return;
}

void act_print(int m)       //对活动集的输出
{
	int i;
	fout<<"user_id: "<<act[m].user_id<<endl<<"name: "<<act[m].name<<endl;
	for(i=0;i<act[m].num;i++)
	{
		fout<<i<<' '<<act[m].cont[i]<<endl;
	}
	return;
}

void bur_print(int m)
{
	int i;
	if(bur[m].fre[0]<=2)return;
	if(bur[m].num<=9)return;
	if(bur[m].fre[0]>500)return;
	fout<<"burst: "<<m<<endl;
	for(i=0;i<bur[m].num;i++)
	{
		fout<<i<<' ';
		fout<<bur[m].phrase[i]<<' ';
		fout<<bur[m].fre[i]<<endl;
	}
}
		

void act_con()            //活动集的相关性处理函数
{
	int i,j,num=0;
	int sa[10000];
	memset(connect,0,sizeof(connect));
	for(i=0;i<100000;i++)
	{
		if(h[i])
		{
			num=0;
			memset(sa,0,sizeof(sa));
			for(j=0;j<ph[i].actnum;j++)
			{
				sa[num]=ph[i].p_act[j];
				num++;
			}
			if((p_valid[i]=score_act(num,sa,ph[i].s))==false)continue;
			for(j=0;j<ph[i].actnum;j++)
			{
				score_p(ph[i].s,ph[i].p_act[j]);
			}
		}
	}
}

void score_p(char *w,int x)         //判断一个词汇属于这个活动特征词的概率	
{
	int i,c=0,sum=0;
	for(i=0;i<act[x].num;i++)
	{
		if(strcmp(act[x].cont[i],w)==0)
		{
			c=i;
			break;
		}
	}
	for(i=0;i<act[x].num;i++)
	{
		sum+=act[x].contn[i];
	}
	double size=sizeof(w);
	double p1,p2;
	p1=act[x].contn[c]+alpha;
	p2=sum+T_alpha;
	act[x].score[i]=size*p1/(p2*T_size);
}
		
bool score_act(int num,int *sa,char *w)    //判断一个词汇是不是特征词
{
	int i,j;
	double p1,p2,ans;
	p1=num+beta;
	p2=n+T_beta;
	ans=p1/p2;
	if(ans>stand)
	{
		for(i=0;i<num;i++)
		{
			for(j=0;j<act[sa[i]].num;j++)
			{
				if(strcmp(act[sa[i]].cont[j],w)==0)
				{
					act[sa[i]].valid[j]=false;
				}
			}
		}
		return false;
	}
	else return true;
}	

void score_bur_p(int x)
{
	int i;
	double p1,p2,size;
	p2=0;
	for(i=0;i<bur[x].num;i++)
		p2+=bur[x].fre[i];
	for(i=0;i<bur[x].num;i++)
	{
		size=sizeof(bur[x].phrase[i]);
		p1=bur[x].fre[i];
		p1+=alpha;
		p2+=T_alpha;
		bur[x].score[i]=p1*size/(p2*T_size);
	}
}
		

void score_bur(int k)
{
	int i,j,l,fre,p;	
	double max;
	char w[20];
	for(i=0;i<burst_n;i++)
		score_bur_p(i);
	for(i=0;i<burst_n;i++)
	{
		for(j=0;j<=k;j++)
		{
			max=0;
			for(l=0;l<bur[i].num;l++)
			{
				if(bur[i].valid[l] && max<bur[i].score[l])
				{
					max=bur[i].score[l];
					transf(w,bur[i].phrase[l]);
					fre=bur[i].fre[l];
					p=l;
				}
			}
			bur[i].ex_f[bur[i].ex_n]=fre;
			transf(bur[i].ex_p[bur[i].ex_n],w);
			bur[i].ex_n++;
			bur[i].valid[p]=false;
		}
	}
}
		
void act_merge()         //活动集的合并处理
{
	int i,j,max,aim,r[10000],num=0;
	for(i=0;i<n;i++)
	{
		max=act[i].contn[0];
		aim=0;
		for(j=0;j<act[i].num;j++)
		{
			if(act[i].valid[j] && max<act[i].contn[j])
			{
				max=act[i].contn[j];
				aim=j;
			}
		}
		transf(connect[i],act[i].cont[aim]);
	}
	memset(have_deal,false,sizeof(have_deal));
	for(i=0;i<n;i++)
	{
		if(have_deal[i])continue;
		memset(r,0,sizeof(r));
		num=0;
		r[0]=i;
		num++;
		for(j=i+1;j<n;j++)
		{
			if(strcmp(connect[i],connect[j])==0)
			{
				r[num]=j;
				num++;
			}
		}
		do_merge(r,num);
	}	
}
				
void do_merge(int r[10000],int num)         //用于合并多个活动形成事件的函数
{
	int i,j,k,c_num=0,max,os,t;
	char c[10000][20];
	int c_f[10000];
	bool find=false;
	memset(c_f,0,sizeof(c_f));
	for(i=0;i<num;i++)
	{
		have_deal[r[i]]=true;
		for(j=0;j<act[r[i]].num;j++)
		{
			if(act[r[i]].valid[j]==false)continue;
			find=false;
			for(k=0;k<c_num;k++)
			{
				if(strcmp(act[r[i]].cont[j],c[k])==0)
				{
					c_f[k]+=act[r[i]].contn[j];
					find=true;
					break;
				}
			}
			if(!find)
			{
 				transf(c[c_num],act[r[i]].cont[j]);
				c_f[c_num]=act[r[i]].contn[j];
				c_num++;
			}
		}
	}
	max=0;
	t=r[0];
	os=0;
	for(i=0;i<500;i++)
	{
		if(i>=c_num)break;
		for(j=0;j<c_num;j++)
		{
			if(max<c_f[j])
			{
				max=c_f[j];
				os=j;
			}
		}
		transf(bur[burst_n].phrase[bur[burst_n].num],c[os]);
		bur[burst_n].fre[bur[burst_n].num]=c_f[os];
		bur[burst_n].valid[bur[burst_n].num]=true;
		bur[burst_n].num++;
		c_f[os]=0;
		max=0;
	}	
	burst_n++;
}		

void burst_merge()            //burst迭代扩展的函数
{
	int i,j,k,l1,l2;
	int max=0;
	int r[10000];
	int num=0;
	char w[20];
	bool find=false;
	for(k=0;k<3;k++)
	{
		memset(have_deal,false,sizeof(have_deal));
		score_bur(k);
		num=0;
		memset(r,0,sizeof(r));
		int t_burst_n=burst_n;
		burst_n=0;
		for(i=0;i<t_burst_n;i++)
		{
			if(have_deal[i])continue;
			num=0;
			r[0]=i;
			num++;
			for(j=i+1;j<t_burst_n;j++)
			{
				find=false;
				for(l1=0;l1<=k;l1++)
				{
					if(find)break;
					for(l2=0;l2<=k;l2++)
					{
						if(strcmp(bur[i].ex_p[l1],bur[j].ex_p[l2])==0)
						{
							r[num]=j;
							num++;
							have_deal[j]=true;
							find=true;
							break;
						}
					}
				}
			}
			burst_do_merge(r,num);
		}
	}
}

void burst_do_merge(int r[10000],int num)         //用于合并burst的函数
{
	int i,j,k,c_num=0,max,os,t;
	char c[10000][20];
	int c_f[10000];
	bool find=false;
	memset(c_f,0,sizeof(c_f));
	for(i=0;i<num;i++)
	{
		for(j=0;j<bur[r[i]].num;j++)
		{
			find=false;
			for(k=0;k<c_num;k++)
			{
				if(strcmp(bur[r[i]].phrase[j],c[k])==0)
				{
					c_f[k]+=bur[r[i]].fre[j];
					find=true;
					break;
				}
			}
			if(!find)
			{
 				transf(c[c_num],bur[r[i]].phrase[j]);
				c_f[c_num]=bur[r[i]].fre[j];
				c_num++;
			}
		}
	}
	bur[burst_n].burst_clear();
	max=0;
	t=r[0];
	os=0;
	for(i=0;i<500;i++)
	{
		if(i>=c_num)break;
		for(j=0;j<c_num;j++)
		{
			if(max<c_f[j])
			{
				max=c_f[j];
				os=j;
			}
		}
		transf(bur[burst_n].phrase[bur[burst_n].num],c[os]);
		bur[burst_n].fre[bur[burst_n].num]=c_f[os];
		bur[burst_n].valid[bur[burst_n].num]=true;
		bur[burst_n].num++;
		c_f[os]=0;
		max=0;
	}	
	burst_n++;
}		


int main()
{
	read_data();
	int i;
	//for(i=0;i<100000;i++)
		//if(h[i])p_print(i);
	//for(i=0;i<n;i++)act_print(i);
	act_con();
	act_merge();
	burst_merge();
	for(i=0;i<burst_n;i++)
		bur_print(i);
	system("pause");
}